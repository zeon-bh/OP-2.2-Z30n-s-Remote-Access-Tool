--- Author : Z30n_bh
--- Remote Access Tool storage viewer patching script

RemoteStashManager = {}

RemoteStashManager.is_remote_access_active = false
RemoteStashManager.current_target_object_id = nil
RemoteStashManager.current_remote_storage_id = nil
RemoteStashManager.active_storage_data = nil
RemoteStashManager.active_storage_config = nil

-- Store original functions for patching
local original_keyvals_storages_get = nil
local original_keyvals_storages_config_get = nil
local original_StorageViewer_CloseViewer = nil -- For patching CloseViewer
local original_StorageViewer_TakeAllFromStorage = nil -- For patching TakeAllFromStorage
local original_StorageViewer_confirm_change_tool_ui = nil -- For patching confirm_change_tool_ui


function OpenRemoteStashView(target_object_id)
    zstash_logic.debug_log("RemoteStashManager: Attempting to open remote view for object ID: %s", target_object_id)

    if RemoteStashManager.is_remote_access_active then
        zstash_logic.debug_log("! WARNING: Remote access is already active. Aborting new request.")
        return
    end

    local remote_storage_id_key = "storage_" .. target_object_id

    if not keyvals("storages") or not keyvals("storages_config") then
        zstash_logic.debug_log("! ERROR: Keyvals system not found or accessible.")
        return
    end

    local original_data = keyvals("storages"):get(remote_storage_id_key, nil)
    local original_config = keyvals("storages_config"):get(remote_storage_id_key, nil)

    if original_data == nil then
        zstash_logic.debug_log("! ERROR: No data found in keyvals for storage ID: %s", remote_storage_id_key)
        return
    end

    RemoteStashManager.is_remote_access_active = true
    RemoteStashManager.current_target_object_id = target_object_id
    RemoteStashManager.current_remote_storage_id = remote_storage_id_key
    RemoteStashManager.active_storage_data = table.deep_copy(original_data)
    RemoteStashManager.active_storage_config = table.deep_copy(original_config or {}) -- Ensure config is a table

    zstash_logic.debug_log("RemoteStashManager: Copied data for %s.", remote_storage_id_key)

    PatchAndLaunchStashUI()
end

function PatchAndLaunchStashUI()
    if not RemoteStashManager.is_remote_access_active then
        zstash_logic.debug_log("! ERROR: PatchAndLaunchStashUI called when remote access is not active.")
        return
    end

    zstash_logic.debug_log("RemoteStashManager: Patching keyvals and CloseViewer...")

    -- 1. Patch keyvals("storages"):get()
    if not original_keyvals_storages_get then -- Patch only if not already patched
        original_keyvals_storages_get = keyvals("storages").get -- Store original
    end
    keyvals("storages").get = function(self_keyvals, storage_id_param, default_value)
        if RemoteStashManager.is_remote_access_active and storage_id_param == RemoteStashManager.current_remote_storage_id then
            zstash_logic.debug_log("Remote Access (keyvals storages.get): Providing active_storage_data for UI for %s", storage_id_param)
            return RemoteStashManager.active_storage_data
        else
            return original_keyvals_storages_get(self_keyvals, storage_id_param, default_value)
        end
    end

    -- 2. Patch keyvals("storages_config"):get()
    if not original_keyvals_storages_config_get then
        original_keyvals_storages_config_get = keyvals("storages_config").get
    end
    keyvals("storages_config").get = function(self_keyvals_cfg, storage_id_param, default_value)
        if RemoteStashManager.is_remote_access_active and storage_id_param == RemoteStashManager.current_remote_storage_id then
             zstash_logic.debug_log("Remote Access (keyvals storages_config.get): Providing active_storage_config for UI for %s", storage_id_param)
             return RemoteStashManager.active_storage_config
        else
            return original_keyvals_storages_config_get(self_keyvals_cfg, storage_id_param, default_value)
        end
    end

    -- 3. Patch safe_StorageViewer.StorageViewer.CloseViewer
    --    This is to handle saving our data and cleanup when the UI closes.
    if not original_StorageViewer_CloseViewer then
        original_StorageViewer_CloseViewer = safe_StorageViewer.StorageViewer.CloseViewer
    end
    safe_StorageViewer.StorageViewer.CloseViewer = function(viewer_instance)
        -- Check if this closure is for our remotely opened UI
        if RemoteStashManager.is_remote_access_active and
           viewer_instance.binderObject and -- Ensure binderObject exists
           viewer_instance.binderObject.storageID == RemoteStashManager.current_remote_storage_id then

            zstash_logic.debug_log("RemoteStashManager: Intercepted CloseViewer for remote stash %s", RemoteStashManager.current_remote_storage_id)
            -- The data inside viewer_instance.storage_data IS our RemoteStashManager.active_storage_data
            -- because of the keyvals.get patch.
            RemoteStashManager.active_storage_data = table.deep_copy(viewer_instance.storage_data) -- Ensure we have the latest reference from UI
            RemoteStashManager.active_storage_config = table.deep_copy(viewer_instance.storage_config)

            SaveChangesAndCleanup() -- This will save to keyvals and unpatch

            -- Call necessary info port disabling from original CloseViewer, but avoid map spot debug_logic
            -- as self.binderObject.object might be nil or remote.
            disable_info("biznes_remove_special_item")
            disable_info("save_prohibited")
            give_info("ui_rukzak_hide")
            zstash_logic.debug_log("RemoteStashManager: Remote UI closed and data saved.")
            ReopenZStashMenu() -- Re-Open the z stash menu after closing the storage viewer
        else
            -- Not our remote session, or some other issue, call original
            return original_StorageViewer_CloseViewer(viewer_instance)
        end
    end

    -- 4. Patch and override TakeAll function to disable it completely as player is not allowed to destroy stash remotely
    if not original_StorageViewer_TakeAllFromStorage then
        original_StorageViewer_TakeAllFromStorage = safe_StorageViewer.StorageViewer.TakeAllFromStorage
    end
    safe_StorageViewer.StorageViewer.TakeAllFromStorage = function(viewer_instance)
        -- Check if this closure is for our remotely opened UI
        if RemoteStashManager.is_remote_access_active and
           viewer_instance.binderObject and -- Ensure binderObject exists
           viewer_instance.binderObject.storageID == RemoteStashManager.current_remote_storage_id then

           -- Prevent Player to Take all from stash remotely
           viewer_instance:ShowMessageBox(translate("ui_zstash_take_all"))

        else
           return original_StorageViewer_TakeAllFromStorage(viewer_instance)
        end
    end

    -- 5. Disable the change UI button
    if not original_StorageViewer_confirm_change_tool_ui then
        original_StorageViewer_confirm_change_tool_ui = safe_StorageViewer.StorageViewer.confirm_change_tool_ui
    end
    safe_StorageViewer.StorageViewer.confirm_change_tool_ui = function(viewer_instance)
        -- Check if this closure is for our remotely opened UI
        if RemoteStashManager.is_remote_access_active and
           viewer_instance.binderObject and -- Ensure binderObject exists
           viewer_instance.binderObject.storageID == RemoteStashManager.current_remote_storage_id then

           -- Prevent from changing stash UI remotely
           viewer_instance:ShowMessageBox(translate("ui_zstash_ui_change"))

        else
           return original_StorageViewer_confirm_change_tool_ui(viewer_instance)
        end
    end

    -- 6. Create the fake binder object for the UI
    local fake_binder_for_ui = {
        storageID = RemoteStashManager.current_remote_storage_id
        -- StorageViewer.Init takes in binderObject but only reads its member variables and no function calls are made
        -- We substitute BinderObject with a table holding the storageID which will act as fake member for the BinderObject
        -- StorageVierwer.Init will reference this table with self.binderObject.storageID where self is our fake_binder_for_ui
        -- The patched CloseViewer will handle the map spot issue.
    }

    -- 7. Instantiate and show the StorageViewer UI
    zstash_logic.debug_log("RemoteStashManager: Instantiating safe_StorageViewer.StorageViewer with fake binder for %s", fake_binder_for_ui.storageID)
    local storageViewerInstance = safe_StorageViewer.StorageViewer(fake_binder_for_ui)

    if not storageViewerInstance then
        zstash_logic.debug_log("! ERROR: Failed to create safe_StorageViewer.StorageViewer instance.")
        RestorePatchesAndCleanup() -- Cleanup if UI creation fails
        return
    end

    zstash_logic.debug_log("RemoteStashManager: Showing remote stash UI.")
    local ir_wnd = level.main_input_receiver()
    if ir_wnd then
        ir_wnd:GetHolder():start_stop_menu(storageViewerInstance, true)
    else
        level.start_stop_menu(storageViewerInstance, true)
    end
    -- The WINDOW_STOP_DIALOG on storageViewerInstance will trigger our patched CloseViewer.
end

function SaveChangesAndCleanup()
    if RemoteStashManager.is_remote_access_active and RemoteStashManager.current_remote_storage_id and RemoteStashManager.active_storage_data then
        zstash_logic.debug_log("RemoteStashManager: 'Committing' changes for %s.", RemoteStashManager.current_remote_storage_id)

        local live_storage_table_ref = keyvals("storages"):get(RemoteStashManager.current_remote_storage_id, nil)
        local live_config_table_ref = keyvals("storages_config"):get(RemoteStashManager.current_remote_storage_id, nil)

        if live_storage_table_ref then
            -- Clear the existing live table's contents
            live_storage_table_ref = table.deep_copy(RemoteStashManager.active_storage_data)
            zstash_logic.debug_log("RemoteStashManager: Storage data for %s updated by replacing content of live reference.", RemoteStashManager.current_remote_storage_id)
        else
            zstash_logic.debug_log("! CRITICAL WARNING: Could not get live reference for storage %s via keyvals().get(). Stash data changes will NOT be saved by this method.", RemoteStashManager.current_remote_storage_id)
            -- This scenario would imply the stash ID was new and keyvals().get() doesn't create it,
            -- or the ID somehow became invalid.
        end

        -- Handle config similarly
        if live_config_table_ref and type(RemoteStashManager.active_storage_config) == "table" then
            live_config_table_ref = table.deep_copy(RemoteStashManager.active_storage_config)
            zstash_logic.debug_log("RemoteStashManager: Storage config for %s updated.", RemoteStashManager.current_remote_storage_id)
        elseif type(RemoteStashManager.active_storage_config) == "table" then
             zstash_logic.debug_log("! WARNING: Could not get live reference for config %s or active_storage_config is not a table. Config changes might not be saved.", RemoteStashManager.current_remote_storage_id)
        end
    else
        if RemoteStashManager.is_remote_access_active then
            zstash_logic.debug_log("RemoteStashManager: SaveChangesAndCleanup called, but no active data to save or invalid state.")
        end
    end
    RestorePatchesAndCleanup() -- This must always be called
end

function RestorePatchesAndCleanup()
    zstash_logic.debug_log("RemoteStashManager: Restoring patched functions and cleaning up state.")
    -- Restore patched functions
    if original_keyvals_storages_get then
        keyvals("storages").get = original_keyvals_storages_get
        original_keyvals_storages_get = nil
    end
    if original_keyvals_storages_config_get then
        keyvals("storages_config").get = original_keyvals_storages_config_get
        original_keyvals_storages_config_get = nil
    end
    if original_StorageViewer_CloseViewer then
        if safe_StorageViewer and safe_StorageViewer.StorageViewer then -- Check if class still exists
            safe_StorageViewer.StorageViewer.CloseViewer = original_StorageViewer_CloseViewer
        end
        original_StorageViewer_CloseViewer = nil
    end
    if original_StorageViewer_TakeAllFromStorage then
        if safe_StorageViewer and safe_StorageViewer.StorageViewer then -- Check if class still exists
            safe_StorageViewer.StorageViewer.TakeAllFromStorage = original_StorageViewer_TakeAllFromStorage
        end
        original_StorageViewer_TakeAllFromStorage = nil
    end
    if original_StorageViewer_confirm_change_tool_ui then
        if safe_StorageViewer and safe_StorageViewer.StorageViewer then -- Check if class still exists
            safe_StorageViewer.StorageViewer.confirm_change_tool_ui = original_StorageViewer_confirm_change_tool_ui
        end
        original_StorageViewer_confirm_change_tool_ui = nil
    end

    -- Clear state variables
    RemoteStashManager.is_remote_access_active = false
    RemoteStashManager.current_target_object_id = nil
    RemoteStashManager.current_remote_storage_id = nil
    RemoteStashManager.active_storage_data = nil
    RemoteStashManager.active_storage_config = nil
end

function ReopenZStashMenu()
    level.start_stop_menu(ui_zstash.ZStashMenu(), true)
end