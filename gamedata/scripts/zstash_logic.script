-- Z Stash Util Functions and definitions
local original_StorageViewer_CloseViewer = nil
local original_UiViewer_CloseViewer = nil
working_zstash_id = nil
local debug = false

local function CreateStashEntry(name, id)
    return {
        stash_name = name,
        stash_id = id
    }
end

function IsDebug()
	return debug
end

function debug_log(str,...)
	if debug then
		log("Z Remote Stash:debug: "..str,...)
	end
end

-- Function called by SafeBinder:use_callback to check whether player has the z stash tool and if stash is already added to the list
function CheckZStashTool(stash_obj,ui_tool)
	local item_exists = false
	local new_stash_id = stash_obj.object:id()
	local ui_tool = stash_obj.storage_config.ui_tool

	db.actor:iterate_ruck(function(item)
		if item then
			if item:section() == "zstash" then
				item_exists = true
				return
			end
		end
	end)

	if not item_exists then return end

	-- check if stash already added
	if StashAlreadyAdded(new_stash_id) then 
		-- If stash already added and player has zstash then update the mapspot link info
		LinkMapSpot(new_stash_id,ui_tool)
		return
	end

	-- If not added to the list start the Text UI window to get the stash name from player
	AddStashToDevice(stash_obj)
	return true
end

-- Check if stash exists or not in the list
function StashAlreadyAdded(zstash_id)
	local s_list = table.load("zstash_linked_stashes") or {}
	if table.size(s_list) > 0 then
		for _,v in pairs(s_list) do
			if v.stash_id == zstash_id then 
				return true
			end
		end
	end
end

-- Getters for Name and ID
function GetStashName(zstash_id)
	local s_list = table.load("zstash_linked_stashes") or {}
	if table.size(s_list) > 0 then
		for _,v in pairs(s_list) do
			if v.stash_id == zstash_id then 
				return v.stash_name
			end
		end
	end
end

function GetStashID(zstash_name)
	local s_list = table.load("zstash_linked_stashes") or {}
	if table.size(s_list) > 0 then
		for _,v in pairs(s_list) do
			if v.stash_name == zstash_name then 
				return v.stash_id
			end
		end
	end
end

-- Function to Add a Linked Stash
function AddStashToDevice(stash_obj)
	local name_context = translate("ui_zstash_add_dialog")
    local input_dialog = ui_zstash_input.ZStashInputDialog(name_context,
						 "", 
						 zstash_logic.AddZStashName,
						 {stash_obj} 
						)
    
    local ir_wnd = level.main_input_receiver()
    if ir_wnd then
        ir_wnd:GetHolder():start_stop_menu(input_dialog, true)
    else
        level.start_stop_menu(input_dialog, true)
    end
end



--- Text Input Processing Functions ---

function AddZStashName(stash_binder, entered_name, confirmed)
	local new_zstash_id = stash_binder.object:id()

	if confirmed and entered_name and new_zstash_id then
		debug_log("Adding Stash...")
		local name_to_save = string.trim(entered_name) -- Trim whitespace
		if name_to_save == "" then
			name_to_save = level.name() .. " - " .. new_zstash_id -- Default if empty
		end

		local stash_list = table.load("zstash_linked_stashes") or {} -- Ensure it's a table

		-- Check if stash has a unique name in the list
		local already_exists = false
		for _,v in pairs(stash_list) do
			if string.lower(v.stash_name) == string.lower(entered_name) then
				already_exists = true
				break
			end
		end

		if not already_exists then
			table.insert(stash_list, CreateStashEntry(name_to_save, new_zstash_id))
			table.save("zstash_linked_stashes", stash_list)
			sms(translate("sms_zstash_label").." "..name_to_save.." "..translate("sms_zstash_stash_add"), nil, "nano", 7500)

			-- Intercepting StorageViewer.CloseViewer() to update map spot for linked stash
			if confirmed then
				LinkMapSpot(new_zstash_id, stash_binder.storage_config.ui_tool)
			end
		else
			-- Name already exists then exit without opening stash box
			sms(translate("sms_zstash_label").." "..translate("sms_zstash_stash_unique"), nil, "nano", 5000)
		end
	end
	
	-- Open the stash without adding it to Remote Access Tool -- Choose the correct UI
	if stash_binder.storage_config.ui_tool == "string_ui" then
		local storageViewer = safe_StorageViewer.StorageViewer(stash_binder) -- stash_obj is a binder object
		level.start_stop_menu(storageViewer,true)
	elseif stash_binder.storage_config.ui_tool == "icon_ui" then
		local iconViewer = ui_storage_viewer.UIStorageViewer(stash_binder)
		level.start_stop_menu(iconViewer,true)
	else
		debug_log("Invalid ui_tool for SafeBinder obj!!!")
	end
end

-- Rename the stash in the map spot
function RenameZStashSpot(zstash_menu, renamed_stash_id, new_stash_name)
	local old_stash_list = table.load("zstash_linked_stashes")
	local new_stash_list = {}
	for _,v in pairs(old_stash_list) do
		if v.stash_id == renamed_stash_id then
			v.stash_name = new_stash_name
		end
		table.insert(new_stash_list,v)
	end

	-- Save the table and update the map spot with new name
    table.save("zstash_linked_stashes", new_stash_list)
	local linked_stash_spot_text = new_stash_name.."\\n".."%c[0,0,255,1]<< "..translate("ui_zstash_link_mapspot").." >>%c[default]"
	del_map_spot(renamed_stash_id, safe_StorageViewer.MAPSPOTTYPE)
	map_spot(renamed_stash_id, safe_StorageViewer.MAPSPOTTYPE ,linked_stash_spot_text)

	-- Update the Zstash Stash Lists Window
	zstash_menu:UpdateList()
end

----- Map Spot Patching -----

-- Update the Map Spot of the stash everytime the stash box is opened physically
function LinkMapSpot(new_zstash_id,ui_tool)
	working_zstash_id = new_zstash_id
	local mapspot = safe_StorageViewer.MAPSPOTTYPE

	local closer_func = function(working_stash)
			if working_stash.binderObject.object:id() == working_zstash_id then
				del_map_spot(working_zstash_id, mapspot)
				local stash_name = GetStashName(working_zstash_id)
				local linked_stash_spot_text = stash_name.."\\n".."%c[0,0,255,1]<< "..translate("ui_zstash_link_mapspot").." >>%c[default]"
				map_spot(working_zstash_id, mapspot ,linked_stash_spot_text)
				disable_info("biznes_remove_special_item")
				disable_info("save_prohibited")
				give_info("ui_rukzak_hide")
				RestoreCloseViewer(ui_tool) -- Re patch CloseViewer()
			end
		end

	if ui_tool == "string_ui" then
		if not original_StorageViewer_CloseViewer then
			original_StorageViewer_CloseViewer = safe_StorageViewer.StorageViewer.CloseViewer
		end
		safe_StorageViewer.StorageViewer.CloseViewer = closer_func
	elseif ui_tool == "icon_ui" then
		if not original_UiViewer_CloseViewer then
			original_UiViewer_CloseViewer = ui_storage_viewer.UIStorageViewer.CloseViewer
		end
		ui_storage_viewer.UIStorageViewer.CloseViewer = closer_func
	else
		debug_log("Invalid UI Tool selected, aborting!!!")
	end
end

-- Restore all the patched functions and reset the global vars
function RestoreCloseViewer(ui_tool)
	if ui_tool == "string_ui" then
		if original_StorageViewer_CloseViewer then
			if safe_StorageViewer and safe_StorageViewer.StorageViewer then -- Check if class still exists
				safe_StorageViewer.StorageViewer.CloseViewer = original_StorageViewer_CloseViewer
			end
			original_StorageViewer_CloseViewer = nil
		end
	elseif ui_tool == "icon_ui" then
		if original_UiViewer_CloseViewer then
			if ui_storage_viewer and ui_storage_viewer.UIStorageViewer then -- Check if class still exists
				ui_storage_viewer.UIStorageViewer.CloseViewer = original_UiViewer_CloseViewer
			end
			original_UiViewer_CloseViewer = nil
		end
	else
		debug_log("Invalid UI Tool, Error restoring pathced functions!!!")
	end
	working_zstash_id = nil
end


----- Search items in Linked stashes -----

-- Convert string to lower cases
local function Sanitize(str)
    if type(str) ~= "string" then return "" end -- Handle potential non-string items
    return utf8.lower(str)
end

-- Returns a table of matching words for the search item string passed
function FindItemInTable(zstash_name, search_string, str_table, case_insensitive)
    if case_insensitive == nil then case_insensitive = true end
    local matches = {}
    for str_key,count in pairs(str_table) do
        if type(str_key) == "string" then -- Ensure it's a string
            if utf8.find(Sanitize(str_key), Sanitize(search_string)) then
				matches[str_key] = {stash_name = zstash_name, count = count}
            end
        end
    end
	for k,v in pairs(matches) do
		debug_log("FindItemInTable() : Item_Key = %s | stash_name = %s | count = %d", k, v.stash_name, v.count)
	end

    return matches
end

-- Find an Item in the Linked Stashes
function FindItemLinkedStashes(zstash_menu, linked_zstashes, item_to_search)
	local systemIniReader = ini_reader.iniReader()
	local search_results = {} -- Will contain Linked Stash Name, table of all matched items

	for _,zstash in pairs(linked_zstashes) do
		local storage_id_key = "storage_" .. zstash.stash_id
    	local stash_data = table.deep_copy(keyvals("storages"):get(storage_id_key, nil))
		local item_data_table = {}

		-- Skip Empty or Invalid Linked Stashes
		if stash_data and table.size(stash_data) > 0 then
        	for item_type, item_tbl in pairs(stash_data) do
				-- Get all the items from this itype
				for index, data in pairs(item_tbl) do
                	if data.section then
						local item_name = systemIniReader:readTranslatedString(data.section, "inv_name")

						if not item_name then item_name = "Unknown: " .. data.section end

						-- Insert the items found in the stash
						if item_data_table[item_name] then
                        local currentItem = item_data_table[item_name]
							item_data_table[item_name] = item_data_table[item_name] + (data.params.count or 1)
						else
							item_data_table[item_name] = (data.params.count or 1)
						end
					end
				end
			end
			local matched_item_table = FindItemInTable(zstash.stash_name, item_to_search, item_data_table)

			if matched_item_table and table.size(matched_item_table) > 0 then
				for item_key,item_data in pairs(matched_item_table) do
					if search_results[item_key] == nil then
						search_results[item_key] = {} -- New list instance for this item_key
					end
					table.insert(search_results[item_key], item_data)
				end
			end
    	end
	end
	-- Display the Results
	zstash_menu:SearchResult(item_to_search,search_results) 
end