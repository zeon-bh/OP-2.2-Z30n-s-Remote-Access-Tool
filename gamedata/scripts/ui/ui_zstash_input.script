--- Author : Z30n_bh

------ Text Box CUI class ------

class "ZStashInputDialog" (CUIScriptWnd)
function ZStashInputDialog:__init(prompt_text, current_text, callback_func, args_table) super()
	self.prompt_text = prompt_text
	self.current_text = current_text
	self.callback_func = callback_func
	self.args = args_table
	self.enter_pressed_in_editbox = false

	self:InitControls()
	self:InitCallBacks()
	self.caption_static:SetText(self.prompt_text)
	if string.len(self.current_text) > 0 then self.edit_box:SetText(self.current_text) end
end

function ZStashInputDialog:InitControls()
	self:Init(0,0,1024,768)
	self:Enable(true)
	self:SetAutoDelete(true)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_zstash_textbox.xml")

	self.dialog_frame = xml:InitStatic("custom_input_box:dialog", self) -- The main frame from XML

	self.caption_static = xml:InitStatic("custom_input_box:caption", self.dialog_frame)
	self.edit_box = xml:InitEditBox("custom_input_box:edit_box", self.dialog_frame)
	self.btn_ok = xml:Init3tButton("custom_input_box:btn_ok", self.dialog_frame)
	self.btn_cancel = xml:Init3tButton("custom_input_box:btn_cancel", self.dialog_frame)

	self:Register(self.btn_ok, "btn_ok_input")
	self:Register(self.btn_cancel, "btn_cancel_input")
	-- Important for keyboard input to the edit box
	self:Register(self.edit_box, "edit_box_input")
end

function ZStashInputDialog:InitCallBacks()
	self:AddCallback("btn_ok_input", ui_events.BUTTON_CLICKED, self.OnButton_OK_Clicked, self)
	self:AddCallback("btn_cancel_input", ui_events.BUTTON_CLICKED, self.OnButton_Cancel_Clicked, self)
	-- Allow Enter key to submit from edit box
	self:AddCallback("edit_box_input", ui_events.EDIT_TEXT_COMMIT, 
			function() 
				self.enter_pressed_in_editbox = true
			end, 
		self)
end

function ZStashInputDialog:OnButton_OK_Clicked()
	local entered_text = self.edit_box:GetText()
	self:GetHolder():start_stop_menu(self, true) -- Close this dialog

	if type(self.args) ~= "table" then
		zstash_logic.debug_log("ZStash_Input:OnButton_OK_Clicked() : self.args not a table!!!")
		return
	end

	table.insert(self.args, entered_text) -- Always return the entered input text

	if self.callback_func == zstash_logic.AddZStashName then
		local confirmed = true
		table.insert(self.args, confirmed)
	end

	return self.callback_func(unpack(self.args))
end

function ZStashInputDialog:OnButton_Cancel_Clicked()
	self:GetHolder():start_stop_menu(self, true) -- Close this dialog

	if self.callback_func == zstash_logic.AddZStashName then
		local confirmed = false
		table.insert(self.args, "") -- Insert a empty string to maintain args order for the callback func
		table.insert(self.args, confirmed)
		return self.callback_func(unpack(self.args))
	end
end

function ZStashInputDialog:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:OnButton_Cancel_Clicked()
		elseif dik == DIK_keys.DIK_RETURN then
			self:OnButton_OK_Clicked()
		end
	end
	return true -- Consume input
end

function ZStashInputDialog:Update()
    CUIScriptWnd.Update(self) -- Call superclass update

    if self.enter_pressed_in_editbox then
        self.enter_pressed_in_editbox = false -- Reset flag
        self:OnButton_OK_Clicked()
    end
end